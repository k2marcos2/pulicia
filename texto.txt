code do code.gs

function doPost(e) {
  try {
    const SPREADSHEET_ID = "1rF19ZUm0FymIjWRU5Qhzn_LkGmJT1i9akgyskPEsrr4";
    const SHEET_NAME = "RESPOSTAS";
    const DRIVE_FOLDER_ID = "1hpZIm3OedEs82yeLN6IG-z3RUu9QMv3w";

    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEET_NAME);
    const data = JSON.parse(e.postData.contents);

    let midiaLinks = [];
    if (data.Midias && Array.isArray(data.Midias)) {
      const folder = DriveApp.getFolderById(DRIVE_FOLDER_ID);
      for (let item of data.Midias) {
        try {
          const blob = Utilities.newBlob(Utilities.base64Decode(item.base64), item.tipo, item.nome);
          const file = folder.createFile(blob);
          file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
          midiaLinks.push(getDirectDownloadLink(file));
        } catch (e) {
          midiaLinks.push("Erro em " + item.nome);
        }
      }
    }

    let assinaturaURL = "Sem assinatura";
    if (data.AssinaturaBase64) {
      const folder = DriveApp.getFolderById(DRIVE_FOLDER_ID);
      const blob = Utilities.newBlob(
        Utilities.base64Decode(data.AssinaturaBase64.split(',')[1]),
        "image/png",
        `assinatura_${data.Motorista}_${Date.now()}.png`
      );
      const file = folder.createFile(blob);
      file.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
      assinaturaURL = getDirectDownloadLink(file);
    }

    const pdfURL = criarPDF(data, assinaturaURL, midiaLinks, DRIVE_FOLDER_ID);

    const novaLinha = [
      new Date().toLocaleString("pt-BR"),
      data.Motorista || "",
      data.DataCautela || "",
      data.HoraCautela || "",
      data.ValidadeCNH || "",
      data.CategoriaCNH || "",
      data.Veiculo || "",
      data.Prefixo || "",
      data.Placa || "",
      data.KmAtual || "",
      data.KmProxRevisao || "",
      data.NivelAgua || "",
      data.NivelOleo || "",
      data.NivelCombustivel || "",
      data.Pneus || "",
      data.GiroflexSirene || "",
      data.LampadasQueimadas || "",
      data.Parabrisa || "",
      data.Radio || "",
      data.EquipamentosObrigatorios || "",
      data.QtdCones || "",
      data.OutrosProblemas || "",
      midiaLinks.join(" | "),
      assinaturaURL,
      pdfURL
    ];

    sheet.appendRow(novaLinha);

    return ContentService.createTextOutput(
      JSON.stringify({ status: "success", message: "Enviado com sucesso!" })
    ).setMimeType(ContentService.MimeType.JSON);
  } catch (err) {
    return ContentService.createTextOutput(
      JSON.stringify({ status: "error", message: err.toString() })
    ).setMimeType(ContentService.MimeType.JSON);
  }
}


code do PDF.gs

function criarPDF(data, assinaturaURL, midiaLinks, folderId) {
  const doc = DocumentApp.create(`Cautela - ${data.Motorista || 'Motorista'}`);
  const body = doc.getBody();

  body.appendParagraph("CHECKLIST DE CAUTELA DE VIATURA").setHeading(DocumentApp.ParagraphHeading.HEADING1);
  body.appendParagraph(`Data de envio: ${new Date().toLocaleString("pt-BR")}`);

  const campos = [
    ["Motorista", data.Motorista],
    ["Data da Cautela", data.DataCautela],
    ["Hora da Cautela", data.HoraCautela],
    ["Validade CNH", data.ValidadeCNH],
    ["Categoria CNH", data.CategoriaCNH],
    ["Veículo", data.Veiculo],
    ["Prefixo", data.Prefixo],
    ["Placa", data.Placa],
    ["Km Atual", data.KmAtual],
    ["Km Próxima Revisão", data.KmProxRevisao],
    ["Nível de Água", data.NivelAgua],
    ["Óleo do Motor", data.NivelOleo],
    ["Combustível", data.NivelCombustivel],
    ["Pneus", data.Pneus],
    ["Giroflex/Sirene", data.GiroflexSirene],
    ["Lâmpadas Queimadas", data.LampadasQueimadas],
    ["Parabrisa", data.Parabrisa],
    ["Rádio", data.Radio],
    ["Equipamentos Obrigatórios", data.EquipamentosObrigatorios],
    ["Quantidade de Cones", data.QtdCones],
    ["Outros Problemas", data.OutrosProblemas],
    ["Mídias (links)", midiaLinks.join(" | ")]
  ];

  campos.forEach(([titulo, valor]) => {
    body.appendParagraph(`${titulo}: ${valor || "Não informado"}`);
  });

  if (assinaturaURL && assinaturaURL !== "Sem assinatura" && assinaturaURL !== "Erro no upload") {
    try {
      const blob = UrlFetchApp.fetch(assinaturaURL).getBlob();
      body.appendParagraph("Assinatura:");
      body.appendImage(blob);
    } catch (e) {
      body.appendParagraph("⚠ Erro ao carregar assinatura.");
    }
  }

  doc.saveAndClose();
  const pdf = DriveApp.getFileById(doc.getId()).getAs("application/pdf");
  const folder = DriveApp.getFolderById(folderId);
  const pdfFile = folder.createFile(pdf);
  pdfFile.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);

  return getDirectDownloadLink(pdfFile);
}

function getDirectDownloadLink(file) {
  return `https://drive.google.com/uc?export=view&id=${file.getId()}`;
}
